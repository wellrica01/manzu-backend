generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id                  Int                  @id @default(autoincrement())
  type                String               // "medication", "diagnostic", or "diagnostic_package"
  name                String
  genericName         String?              // Medication-specific
  category            String?
  description         String?
  manufacturer        String?              // Medication-specific
  form                String?              // Medication-specific
  dosage              String?              // Medication-specific
  nafdacCode          String?              @unique // Medication-specific
  testType            String?              // Diagnostic-specific
  testCode            String?              @unique // Diagnostic-specific
  sampleType          String?              // Diagnostic-specific
  prepInstructions    String?              // Diagnostic-specific
  resultFormat        String?              // Diagnostic-specific
  prescriptionRequired Boolean              @default(false)
  createdAt           DateTime             @default(now())
  imageUrl            String?
  providerServices    ProviderService[]
  orderItems          OrderItem[]          @relation("ServiceToOrderItems")
  prescriptionItems   PrescriptionItem[]
  results             Result[]             @relation("ServiceToResults")
  packageServices     ServicePackage[]     @relation("PackageToServices")
  includedInPackages  ServicePackage[]     @relation("ServicesToPackage")

  @@index([name], map: "idx_service_name")
  @@index([genericName], map: "idx_service_genericname")
  @@index([testType], map: "idx_service_testtype")
}

model Provider {
  id                      Int              @id @default(autoincrement())
  type                    String           // "pharmacy" or "lab"
  name                    String
  location                Unsupported("geometry")?
  address                 String
  lga                     String
  state                   String
  phone                   String
  licenseNumber           String           @unique
  status                  ProviderStatus   @default(pending)
  createdAt               DateTime         @default(now())
  verifiedAt              DateTime?
  logoUrl                 String?
  isActive                Boolean          @default(true)
  ward                    String?          @db.VarChar(100)
  devicetoken             String?          @db.VarChar(255)
  operatingHours          String?          // Lab-specific
  homeCollectionAvailable Boolean?         // Lab-specific
  orders                  Order[]
  providerServices        ProviderService[]
  providerUsers           ProviderUser[]

  @@index([location], map: "idx_provider_location", type: Gist)
}

model ProviderService {
  providerId          Int
  serviceId           Int
  stock               Int?              // Medication-specific
  price               Float
  receivedDate        DateTime?         // Medication-specific
  expiryDate          DateTime?         // Medication-specific
  available           Boolean           @default(true) // Lab-specific
  resultTurnaroundHours Int?            // Lab-specific
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  provider            Provider          @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service             Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  orderItems          OrderItem[]

  @@id([providerId, serviceId])
}

model Prescription {
  id                     Int                      @id @default(autoincrement())
  patientIdentifier      String
  fileUrl                String
  status                 PrescriptionStatus       @default(pending)
  verified               Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  email                  String?                  @db.VarChar(255)
  phone                  String?                  @db.VarChar(20)
  referringPhysicianName String?                  // Lab-specific
  priority               String?                  // Lab-specific
  orders                 Order[]
  prescriptionItems      PrescriptionItem[]

  @@index([patientIdentifier], map: "idx_prescription_patientidentifier")
}

model Order {
  id                Int           @id @default(autoincrement())
  patientIdentifier String
  providerId        Int?
  prescriptionId    Int?
  status            OrderStatus   @default(cart)
  deliveryMethod    String?       // "pickup", "delivery", "lab_visit"
  address           String?
  email             String?
  phone             String?
  totalPrice        Float         @default(0)
  trackingCode      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  appointmentTime   DateTime?     // Lab-specific
  timeSlotStart     DateTime?     // Lab-specific
  timeSlotEnd       DateTime?     // Lab-specific
  cancelledAt       DateTime?
  cancelReason      String?
  paymentReference  String?       @unique
  paymentStatus     PaymentStatus @default(pending)
  checkoutSessionId String?
  provider          Provider?     @relation(fields: [providerId], references: [id], onDelete: Restrict)
  prescription      Prescription? @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  results           Result[]

  @@index([patientIdentifier], map: "idx_order_patientidentifier")
}

model OrderItem {
  id              Int             @id @default(autoincrement())
  orderId         Int
  providerId      Int
  serviceId       Int
  quantity        Int
  price           Float
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  providerService ProviderService @relation(fields: [providerId, serviceId], references: [providerId, serviceId], onDelete: Cascade)
  service         Service         @relation("ServiceToOrderItems", fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([orderId, providerId, serviceId])
}

model ProviderUser {
  id         Int              @id @default(autoincrement())
  email      String           @unique
  password   String
  name       String
  role       ProviderUserRole @default(manager)
  providerId Int
  lastLogin  DateTime?
  createdAt  DateTime         @default(now())
  provider   Provider         @relation(fields: [providerId], references: [id], onDelete: Cascade)
  Consent    Consent[]

  @@index([email], map: "idx_provideruser_email")
}

model AdminUser {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  role      AdminRole @default(admin)
  createdAt DateTime  @default(now())
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model PrescriptionItem {
  id             Int          @id @default(autoincrement())
  prescriptionId Int
  serviceId      Int
  quantity       Int?
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Consent {
  id                Int           @id @default(autoincrement())
  patientidentifier String?       @db.VarChar(255)
  userid            Int?
  consenttype       String        @db.VarChar(255)
  granted           Boolean?      @default(true)
  createdat         DateTime?     @default(now()) @db.Timestamp(6)
  providerUser      ProviderUser? @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([patientidentifier, consenttype])
}

model TransactionReference {
  id                   Int      @id @default(autoincrement())
  transactionReference String   @unique
  orderReferences      String[]
  checkoutSessionId    String
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
}

model Result {
  id                Int              @id @default(autoincrement())
  orderId           Int
  serviceId         Int
  patientIdentifier String
  fileUrl           String?
  value             String?
  status            ResultStatus     @default(pending)
  uploadedAt        DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  order             Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service           Service          @relation("ServiceToResults", fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([patientIdentifier], map: "idx_result_patientidentifier")
}

model ServicePackage {
  packageId     Int
  serviceId     Int
  package       Service @relation("PackageToServices", fields: [packageId], references: [id], onDelete: Cascade)
  service       Service @relation("ServicesToPackage", fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([packageId, serviceId])
}

enum OrderStatus {
  cart
  pending
  pending_prescription
  confirmed
  processing
  shipped
  delivered
  ready_for_pickup
  cancelled
  sample_collected
  result_ready
  completed
  pending_testorder
}

enum PaymentStatus {
  pending
  paid
  failed
  cancelled
}

enum ProviderStatus {
  pending
  verified
  rejected
}

enum PrescriptionStatus {
  pending
  verified
  rejected
}

enum AdminRole {
  admin
  support
}

enum ProviderUserRole {
  manager
  pharmacist
  lab_scientist
  pathologist
  radiologist
  technician
}

enum ResultStatus {
  pending
  available
  reviewed
  rejected
}