generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Medication {
  id                     Int                      @id @default(autoincrement())
  name                   String
  genericName            String
  category               String?
  description            String?
  manufacturer           String?
  form                   String?
  dosage                 String?
  nafdacCode             String                   @unique
  prescriptionRequired   Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  imageUrl               String?
  pharmacyMedications    PharmacyMedication[]
  PrescriptionMedication PrescriptionMedication[]

  @@index([genericName], map: "idx_medication_genericname")
  @@index([name], map: "idx_medication_name")
}

model Pharmacy {
  id                  Int                     @id @default(autoincrement())
  name                String
  location            Unsupported("geometry")
  address             String
  lga                 String
  state               String
  phone               String
  licenseNumber       String                  @unique
  status              PharmacyStatus          @default(pending)
  createdAt           DateTime                @default(now())
  verifiedAt          DateTime?
  logoUrl             String?
  isActive            Boolean                 @default(true)
  ward                String?                 @db.VarChar(100)
  devicetoken         String?                 @db.VarChar(255)
  orders              Order[]
  pharmacyMedications PharmacyMedication[]
  users               PharmacyUser[]

  @@index([location], map: "idx_pharmacy_location", type: Gist)
}

model PharmacyMedication {
  pharmacyId   Int
  medicationId Int
  stock        Int
  price        Float
  receivedDate DateTime?
  expiryDate   DateTime?
  orderItems   OrderItem[]
  medication   Medication  @relation(fields: [medicationId], references: [id])
  pharmacy     Pharmacy    @relation(fields: [pharmacyId], references: [id])

  @@id([pharmacyId, medicationId])
}

model Prescription {
  id                     Int                      @id @default(autoincrement())
  patientIdentifier      String
  fileUrl                String
  status                 PrescriptionStatus       @default(pending)
  verified               Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  email                  String?                  @db.VarChar(255)
  phone                  String?                  @db.VarChar(20)
  orders                 Order[]
  PrescriptionMedication PrescriptionMedication[]
}

model Order {
  id                Int           @id @default(autoincrement())
  patientIdentifier String
  pharmacyId        Int?
  prescriptionId    Int?
  status            OrderStatus   @default(cart)
  deliveryMethod    String?       @default("unspecified")
  address           String?
  email             String?
  phone             String?
  totalPrice        Float         @default(0)
  trackingCode      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  filledAt          DateTime?
  cancelledAt       DateTime?
  cancelReason      String?
  paymentReference  String?       @unique
  paymentStatus     PaymentStatus @default(pending)
  checkoutSessionId String?       @db.VarChar
  pharmacy          Pharmacy?     @relation(fields: [pharmacyId], references: [id], onDelete: Restrict)
  prescription      Prescription? @relation(fields: [prescriptionId], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id                             Int                @id @default(autoincrement())
  orderId                        Int
  pharmacyMedicationPharmacyId   Int
  pharmacyMedicationMedicationId Int
  quantity                       Int
  price                          Float
  order                          Order              @relation(fields: [orderId], references: [id])
  pharmacyMedication             PharmacyMedication @relation(fields: [pharmacyMedicationPharmacyId, pharmacyMedicationMedicationId], references: [pharmacyId, medicationId])

  @@unique([orderId, pharmacyMedicationPharmacyId, pharmacyMedicationMedicationId])
}

model PharmacyUser {
  id         Int              @id @default(autoincrement())
  email      String           @unique
  password   String
  name       String
  role       PharmacyUserRole @default(manager)
  pharmacyId Int
  lastLogin  DateTime?
  createdAt  DateTime         @default(now())
  Consent    Consent[]
  pharmacy   Pharmacy         @relation(fields: [pharmacyId], references: [id])
}

model AdminUser {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  role      AdminRole @default(admin)
  createdAt DateTime  @default(now())
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model PrescriptionMedication {
  id             Int          @id @default(autoincrement())
  prescriptionId Int
  medicationId   Int
  quantity       Int
  Medication     Medication   @relation(fields: [medicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Consent {
  id                Int           @id @default(autoincrement())
  patientidentifier String?       @db.VarChar(255)
  userid            Int?
  consenttype       String        @db.VarChar(255)
  granted           Boolean?      @default(true)
  createdat         DateTime?     @default(now()) @db.Timestamp(6)
  PharmacyUser      PharmacyUser? @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")

  @@unique([patientidentifier, consenttype])
}

model TransactionReference {
  id                   Int      @id(map: "transactionreference_pkey") @default(autoincrement())
  transactionReference String   @unique(map: "transactionreference_transactionreference_key")
  orderReferences      String[]
  checkoutSessionId    String
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
}

model Booking {
  id                Int           @id @default(autoincrement())
  patientIdentifier String
  labId             Int?
  testOrderId       Int?
  status            OrderStatus   @default(cart)
  fulfillmentType   String?       @default("Lab Visit")
  address           String?
  email             String?
  phone             String?
  totalPrice        Float         @default(0)
  trackingCode      String?
  createdAt         DateTime      @default(now()) @db.Timestamp(6)
  updatedAt         DateTime      @default(now()) @db.Timestamp(6)
  appointmentTime   DateTime?     @db.Timestamp(6)
  timeSlotStart     DateTime?     @db.Timestamp(6)
  timeSlotEnd       DateTime?     @db.Timestamp(6)
  cancelledAt       DateTime?     @db.Timestamp(6)
  cancelReason      String?
  paymentReference  String?       @unique
  paymentStatus     PaymentStatus @default(pending)
  checkoutSessionId String?
  Lab               Lab?          @relation(fields: [labId], references: [id], onDelete: Restrict)
  TestOrder         TestOrder?    @relation(fields: [testOrderId], references: [id], onDelete: Cascade)
  BookingItem       BookingItem[]
  TestResult        TestResult[]
}

model BookingItem {
  id            Int     @id @default(autoincrement())
  bookingId     Int
  labTestLabId  Int
  labTestTestId Int
  price         Float
  Booking       Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  LabTest       LabTest @relation(fields: [labTestLabId, labTestTestId], references: [labId, testId], onDelete: Cascade)

  @@unique([bookingId, labTestLabId, labTestTestId])
}

model Lab {
  id             Int                      @id @default(autoincrement())
  name           String
  location       Unsupported("geometry")?
  address        String
  lga            String
  state          String
  phone          String
  licenseNumber  String                   @unique
  status         PharmacyStatus           @default(pending)
  createdAt      DateTime                 @default(now()) @db.Timestamp(6)
  verifiedAt     DateTime?                @db.Timestamp(6)
  logoUrl        String?
  isActive       Boolean                  @default(true)
  ward           String?                  @db.VarChar(100)
  devicetoken    String?                  @db.VarChar(255)
  operatingHours String?
  Booking        Booking[]
  LabTest        LabTest[]
  LabUser        LabUser[]

  @@index([location], map: "idx_lab_location", type: Gist)
}

model LabTest {
  labId       Int
  testId      Int
  price       Float
  available   Boolean       @default(true)
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @default(now()) @db.Timestamp(6)
  BookingItem BookingItem[]
  Lab         Lab           @relation(fields: [labId], references: [id], onDelete: Cascade)
  Test        Test          @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@id([labId, testId])
}

model LabUser {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  password  String
  name      String
  role      LabUserRole @default(manager)
  labId     Int
  lastLogin DateTime?   @db.Timestamp(6)
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  Lab       Lab         @relation(fields: [labId], references: [id], onDelete: Cascade)
}

model Test {
  id               Int             @id @default(autoincrement())
  name             String
  testType         String
  category         String?
  description      String?
  testCode         String?         @unique
  orderRequired    Boolean         @default(false)
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  imageUrl         String?
  duration         Int?
  sampleType       String?
  prepInstructions String?
  resultFormat     String?
  LabTest          LabTest[]
  TestOrderTest    TestOrderTest[]
  TestResult       TestResult[]

  @@index([name], map: "idx_test_name")
  @@index([testType], map: "idx_test_testtype")
}

model TestOrder {
  id                     Int                @id @default(autoincrement())
  patientIdentifier      String
  fileUrl                String
  status                 PrescriptionStatus @default(pending)
  verified               Boolean            @default(false)
  createdAt              DateTime           @default(now()) @db.Timestamp(6)
  email                  String?            @db.VarChar(255)
  phone                  String?            @db.VarChar(20)
  referringPhysicianName String?
  priority               String?
  Booking                Booking[]
  TestOrderTest          TestOrderTest[]
}

model TestOrderTest {
  id          Int       @id @default(autoincrement())
  testOrderId Int
  testId      Int
  Test        Test      @relation(fields: [testId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TestOrder   TestOrder @relation(fields: [testOrderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TestResult {
  id                Int              @id @default(autoincrement())
  bookingId         Int
  testId            Int
  patientIdentifier String
  fileUrl           String?
  value             String?
  status            TestResultStatus @default(pending)
  uploadedAt        DateTime         @default(now()) @db.Timestamp(6)
  updatedAt         DateTime         @default(now()) @db.Timestamp(6)
  Booking           Booking          @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  Test              Test             @relation(fields: [testId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  cart
  pending
  pending_prescription
  confirmed
  processing
  shipped
  delivered
  ready_for_pickup
  cancelled
  sample_collected
  result_ready
  completed
}

enum PaymentStatus {
  pending
  paid
  failed
  cancelled
}

enum PharmacyStatus {
  pending
  verified
  rejected
}

enum PrescriptionStatus {
  pending
  verified
  rejected
}

enum AdminRole {
  admin
  support
}

enum PharmacyUserRole {
  manager
  pharmacist
}

enum LabUserRole {
  manager
  lab_scientist
  pathologist
  radiologist
  technician
}

enum TestResultStatus {
  pending
  available
  reviewed
  rejected
}
